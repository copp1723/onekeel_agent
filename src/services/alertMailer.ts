/**
 * Alert Mailer Service
 * 
 * This service sends alert emails to administrators when critical errors occur.
 * It uses the email template service to format alerts and the mailer service to send them.
 */

import { sendAlertEmail } from './emailTemplateService.js';
import { logger } from '../shared/logger.js';
import { db } from '../shared/db.js';
import { emailQueue } from '../shared/schema.js';
import { isError } from '../utils/errorUtils.js';

// Types
export interface AlertOptions {
  severity?: 'info' | 'warning' | 'error' | 'critical';
  component?: string;
  details?: Record<string, any>;
  actionUrl?: string;
  actionText?: string;
}

/**
 * Get admin email addresses from environment variables
 * @returns Array of admin email addresses
 */
function getAdminEmails(): string[] {
  const adminEmailsStr = process.env.ADMIN_EMAILS || '';
  if (!adminEmailsStr) {
    logger.warn('No admin emails configured for alerts. Set ADMIN_EMAILS environment variable.');
    return [];
  }
  
  return adminEmailsStr.split(',').map(email => email.trim());
}

/**
 * Send an alert to administrators
 * 
 * @param title Alert title
 * @param message Alert message
 * @param options Additional options
 * @returns Promise that resolves when the alert is queued
 */
export async function sendAdminAlert(
  title: string,
  message: string,
  options: AlertOptions = {}
): Promise<boolean> {
  try {
    const adminEmails = getAdminEmails();
    if (adminEmails.length === 0) {
      logger.warn('Cannot send admin alert: No admin emails configured');
      return false;
    }

    const severity = options.severity || 'error';
    const component = options.component || 'System';
    
    // Format the alert title with severity and component
    const formattedTitle = `[${severity.toUpperCase()}] ${component}: ${title}`;
    
    // Prepare detail items for the email template
    const detailItems = [
      { label: 'Timestamp', value: new Date().toISOString() },
      { label: 'Severity', value: severity },
      { label: 'Component', value: component },
    ];
    
    // Add any additional details
    if (options.details) {
      Object.entries(options.details).forEach(([key, value]) => {
        detailItems.push({
          label: key,
          value: typeof value === 'object' ? JSON.stringify(value) : String(value),
        });
      });
    }
    
    // Queue the alert email for each admin
    for (const email of adminEmails) {
      try {
        // Add to email queue for reliable delivery
        await db.insert(emailQueue).values({
          recipientEmail: email,
          subject: formattedTitle,
          body: `${message}\n\nDetails:\n${detailItems.map(item => `${item.label}: ${item.value}`).join('\n')}`,
          htmlBody: undefined, // Will be generated by template service
          options: {
            templateType: 'alert',
            templateData: {
              title: formattedTitle,
              message,
              detailItems,
              actionUrl: options.actionUrl,
              actionText: options.actionText,
              date: new Date().toLocaleString(),
            },
          },
          status: 'pending',
          attempts: 0,
          maxAttempts: 5, // Try harder for admin alerts
        });
        
        logger.info(`Admin alert queued for ${email}: ${formattedTitle}`);
      } catch (error) {
        // Log but continue with other emails
        logger.error(`Failed to queue admin alert for ${email}:`, isError(error) ? error : String(error));
      }
    }
    
    return true;
  } catch (error) {
    logger.error('Failed to send admin alert:', isError(error) ? error : String(error));
    return false;
  }
}

/**
 * Send an immediate alert to administrators (bypassing the queue)
 * Use this only for critical alerts when the queue might be affected
 */
export async function sendImmediateAdminAlert(
  title: string,
  message: string,
  options: AlertOptions = {}
): Promise<boolean> {
  try {
    const adminEmails = getAdminEmails();
    if (adminEmails.length === 0) {
      logger.warn('Cannot send immediate admin alert: No admin emails configured');
      return false;
    }

    const severity = options.severity || 'critical';
    const component = options.component || 'System';
    
    // Format the alert title with severity and component
    const formattedTitle = `[${severity.toUpperCase()}] ${component}: ${title}`;
    
    // Prepare detail items for the email template
    const detailItems = [
      { label: 'Timestamp', value: new Date().toISOString() },
      { label: 'Severity', value: severity },
      { label: 'Component', value: component },
      { label: 'Immediate Alert', value: 'Yes (bypassing queue)' },
    ];
    
    // Add any additional details
    if (options.details) {
      Object.entries(options.details).forEach(([key, value]) => {
        detailItems.push({
          label: key,
          value: typeof value === 'object' ? JSON.stringify(value) : String(value),
        });
      });
    }
    
    // Send the alert email directly to all admins
    await sendAlertEmail(adminEmails, formattedTitle, message, {
      detailItems,
      actionUrl: options.actionUrl,
      actionText: options.actionText,
      date: new Date().toLocaleString(),
    });
    
    logger.info(`Immediate admin alert sent: ${formattedTitle}`);
    return true;
  } catch (error) {
    logger.error('Failed to send immediate admin alert:', isError(error) ? error : String(error));
    return false;
  }
}
