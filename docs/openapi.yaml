openapi: 3.0.0
info:
  title: AgentFlow API
  description: |
    API documentation for the AgentFlow application.
    This API provides endpoints for task management, workflow execution, and authentication.
  version: 1.0.0
  contact:
    name: AgentFlow Support
    email: support@agentflow.com

servers:
  - url: /api
    description: Default API server

components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: connect.sid

  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message
        message:
          type: string
          description: Detailed error message
      required:
        - error

    Task:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the task
        taskType:
          type: string
          description: Type of the task
          example: "fetchCRMReport"
        taskText:
          type: string
          description: Original task text
          example: "Fetch yesterday's sales report from VinSolutions for dealer ABC123"
        taskData:
          type: object
          description: Task-specific parameters
          example:
            platform: "vinsolutions"
            dealerId: "ABC123"
            reportType: "sales"
            dateRange: "yesterday"
        status:
          type: string
          enum: [pending, running, completed, failed]
          description: Current status of the task
          example: "completed"
        userId:
          type: string
          description: ID of the user who created the task
          example: "user_123456"
        result:
          type: object
          description: Result of the task execution
          example:
            title: "Sales Report Summary"
            insights: ["Total sales increased by 15% compared to last week", "SUV sales are trending upward"]
            actionItems: ["Follow up with potential customers", "Focus marketing on SUV models"]
        error:
          type: string
          description: Error message if the task failed
          example: "Failed to authenticate with VinSolutions CRM"
        createdAt:
          type: string
          format: date-time
          description: When the task was created
          example: "2023-05-15T14:30:00Z"
        updatedAt:
          type: string
          format: date-time
          description: When the task was last updated
          example: "2023-05-15T14:35:22Z"
      required:
        - id
        - taskType
        - taskText
        - status

    Workflow:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the workflow
        name:
          type: string
          description: Name of the workflow
        description:
          type: string
          description: Description of the workflow
        status:
          type: string
          enum: [pending, running, completed, failed, paused]
          description: Current status of the workflow
        userId:
          type: string
          description: ID of the user who created the workflow
        steps:
          type: array
          items:
            $ref: '#/components/schemas/WorkflowStep'
        createdAt:
          type: string
          format: date-time
          description: When the workflow was created
        updatedAt:
          type: string
          format: date-time
          description: When the workflow was last updated
      required:
        - id
        - name
        - status

    WorkflowStep:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the step
        type:
          type: string
          enum: [emailIngestion, browserAction, insightGeneration, crm, dataProcessing, api, custom]
          description: Type of the step
        name:
          type: string
          description: Name of the step
        config:
          type: object
          description: Step-specific configuration
        status:
          type: string
          enum: [pending, running, completed, failed]
          description: Current status of the step
      required:
        - id
        - type
        - name
        - config

    User:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the user
        email:
          type: string
          format: email
          description: User's email address
        firstName:
          type: string
          description: User's first name
        lastName:
          type: string
          description: User's last name
        profileImageUrl:
          type: string
          format: uri
          description: URL to the user's profile image
      required:
        - id
        - email

    Job:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the job
          example: "job_7f8d9e6a5b4c3d2e1f"
        taskId:
          type: string
          format: uuid
          description: ID of the associated task
          example: "task_1a2b3c4d5e6f7g8h9i"
        status:
          type: string
          enum: [pending, running, completed, failed]
          description: Current status of the job
          example: "completed"
        priority:
          type: integer
          description: Job priority (higher number means higher priority)
          example: 5
        result:
          type: object
          description: Result of the job execution
          example:
            downloadedFile: "/tmp/reports/sales_report_20230515.csv"
            recordCount: 156
            processedAt: "2023-05-15T14:32:45Z"
        error:
          type: string
          description: Error message if the job failed
          example: "Timeout while connecting to CRM server"
        attempts:
          type: integer
          description: Number of attempts made to execute the job
          example: 2
        maxAttempts:
          type: integer
          description: Maximum number of attempts allowed
          example: 3
        startedAt:
          type: string
          format: date-time
          description: When the job started execution
          example: "2023-05-15T14:30:15Z"
        completedAt:
          type: string
          format: date-time
          description: When the job completed execution
          example: "2023-05-15T14:33:22Z"
        createdAt:
          type: string
          format: date-time
          description: When the job was created
          example: "2023-05-15T14:30:00Z"
        updatedAt:
          type: string
          format: date-time
          description: When the job was last updated
          example: "2023-05-15T14:33:22Z"
      required:
        - id
        - taskId
        - status
        - priority

    HealthCheck:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the health check
        name:
          type: string
          description: Name of the health check
        status:
          type: string
          enum: [healthy, degraded, unhealthy]
          description: Current status of the health check
        message:
          type: string
          description: Status message
        lastCheck:
          type: string
          format: date-time
          description: When the health check was last run
        details:
          type: object
          description: Additional details about the health check
      required:
        - id
        - name
        - status

    HealthLog:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the health log
        checkId:
          type: string
          description: ID of the associated health check
        status:
          type: string
          enum: [healthy, degraded, unhealthy]
          description: Status at the time of the log
        message:
          type: string
          description: Status message
        details:
          type: object
          description: Additional details about the health check
        timestamp:
          type: string
          format: date-time
          description: When the log was created
      required:
        - id
        - checkId
        - status
        - timestamp

paths:
  /health:
    get:
      summary: Health check endpoint
      description: Check if the API server is running
      operationId: healthCheck
      responses:
        '200':
          description: API server is running
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: up
                  version:
                    type: string
                    example: 1.0.0
                  message:
                    type: string
                    example: API server is running

  /tasks:
    get:
      summary: List all tasks
      description: Get a list of all tasks
      operationId: listTasks
      security:
        - cookieAuth: []
      responses:
        '200':
          description: List of tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      summary: Create a new task
      description: Submit a new task for processing
      operationId: createTask
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                task:
                  type: string
                  description: Task description
              required:
                - task
      responses:
        '201':
          description: Task created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  jobId:
                    type: string
                  message:
                    type: string
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /tasks/{taskId}:
    get:
      summary: Get task by ID
      description: Get details of a specific task
      operationId: getTask
      security:
        - cookieAuth: []
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Task details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /test-parser:
    post:
      summary: Test task parser
      description: Test the task parser with a given input
      operationId: testParser
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                task:
                  type: string
                  description: Task description to parse
              required:
                - task
      responses:
        '200':
          description: Parsed task result
          content:
            application/json:
              schema:
                type: object
                properties:
                  task:
                    $ref: '#/components/schemas/Task'
                  executionPlan:
                    type: object
                    description: Execution plan for the task
                  error:
                    type: string
                    description: Error message if parsing failed
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /submit-task:
    post:
      summary: Submit task for immediate execution
      description: Submit a task for immediate processing with high priority
      operationId: submitTask
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                task:
                  type: string
                  description: Task description
              required:
                - task
      responses:
        '201':
          description: Task submitted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  jobId:
                    type: string
                  message:
                    type: string
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /jobs:
    get:
      summary: Get all jobs
      description: Returns a list of all jobs with optional filtering by status
      operationId: listJobs
      security:
        - cookieAuth: []
      parameters:
        - name: status
          in: query
          description: Filter jobs by status
          schema:
            type: string
            enum: [pending, running, completed, failed]
        - name: limit
          in: query
          description: Maximum number of jobs to return
          schema:
            type: integer
            default: 100
      responses:
        '200':
          description: List of jobs
          content:
            application/json:
              schema:
                type: object
                properties:
                  jobs:
                    type: array
                    items:
                      $ref: '#/components/schemas/Job'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /jobs/{id}:
    get:
      summary: Get a specific job by ID
      description: Returns details of a specific job
      operationId: getJobById
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Job ID
          schema:
            type: string
      responses:
        '200':
          description: Job details
          content:
            application/json:
              schema:
                type: object
                properties:
                  job:
                    $ref: '#/components/schemas/Job'
                  task:
                    $ref: '#/components/schemas/Task'
        '404':
          description: Job not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /jobs/{id}/retry:
    post:
      summary: Retry a failed job
      description: Manually retry a failed job
      operationId: retryJob
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Job ID
          schema:
            type: string
      responses:
        '200':
          description: Job retry initiated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Job retry initiated
                  jobId:
                    type: string
        '400':
          description: Failed to retry job
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /jobs/enqueue/{taskId}:
    post:
      summary: Enqueue a new job for a task
      description: Manually enqueue a new job for a task
      operationId: enqueueJob
      security:
        - cookieAuth: []
      parameters:
        - name: taskId
          in: path
          required: true
          description: Task ID
          schema:
            type: string
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                priority:
                  type: integer
                  default: 1
                  description: Job priority (higher number means higher priority)
      responses:
        '200':
          description: Job enqueued successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Job enqueued successfully
                  jobId:
                    type: string
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /health-monitoring/summary:
    get:
      summary: Get overall system health summary
      description: Returns a summary of the system health
      operationId: getHealthSummary
      security:
        - cookieAuth: []
      responses:
        '200':
          description: Health summary
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [healthy, degraded, unhealthy]
                  services:
                    type: object
                    additionalProperties:
                      type: object
                      properties:
                        status:
                          type: string
                          enum: [healthy, degraded, unhealthy]
                        lastCheck:
                          type: string
                          format: date-time
                        message:
                          type: string
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /health-monitoring/checks/run:
    post:
      summary: Manually run all health checks
      description: Runs all health checks and returns the results
      operationId: runAllHealthChecks
      security:
        - cookieAuth: []
      responses:
        '200':
          description: Health check results
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HealthCheck'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /health-monitoring/checks/{id}/run:
    post:
      summary: Run a specific health check
      description: Runs a specific health check and returns the result
      operationId: runHealthCheck
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Health check ID
          schema:
            type: string
      responses:
        '200':
          description: Health check result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheck'
        '404':
          description: Health check not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /health-monitoring/checks:
    get:
      summary: Get all health checks
      description: Returns a list of all health checks
      operationId: getLatestHealthChecks
      security:
        - cookieAuth: []
      responses:
        '200':
          description: List of health checks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HealthCheck'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /health-monitoring/logs/{checkId}:
    get:
      summary: Get health logs for a specific check
      description: Returns a list of health logs for a specific check
      operationId: getHealthLogs
      security:
        - cookieAuth: []
      parameters:
        - name: checkId
          in: path
          required: true
          description: Health check ID
          schema:
            type: string
        - name: limit
          in: query
          description: Maximum number of logs to return
          schema:
            type: integer
            default: 100
      responses:
        '200':
          description: List of health logs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HealthLog'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /emails/notifications/{workflowId}:
    post:
      summary: Configure email notifications for a workflow
      description: Set up email notification preferences for a specific workflow
      tags:
        - Emails
      parameters:
        - name: workflowId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the workflow to configure notifications for
          example: "workflow_12345678"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                recipientEmail:
                  type: string
                  format: email
                  description: Email address to send notifications to
                  example: "user@example.com"
                sendOnCompletion:
                  type: boolean
                  description: Whether to send notifications when workflow completes
                  example: true
                sendOnFailure:
                  type: boolean
                  description: Whether to send notifications when workflow fails
                  example: true
              required:
                - recipientEmail
            example:
              recipientEmail: "user@example.com"
              sendOnCompletion: true
              sendOnFailure: true
      responses:
        '200':
          description: Notification settings configured successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Email notification settings configured successfully"
                  settings:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                        example: "notif_87654321"
                      workflowId:
                        type: string
                        format: uuid
                        example: "workflow_12345678"
                      recipientEmail:
                        type: string
                        format: email
                        example: "user@example.com"
                      sendOnCompletion:
                        type: boolean
                        example: true
                      sendOnFailure:
                        type: boolean
                        example: true
                      createdAt:
                        type: string
                        format: date-time
                        example: "2023-05-15T14:30:00Z"
              example:
                success: true
                message: "Email notification settings configured successfully"
                settings:
                  id: "notif_87654321"
                  workflowId: "workflow_12345678"
                  recipientEmail: "user@example.com"
                  sendOnCompletion: true
                  sendOnFailure: true
                  createdAt: "2023-05-15T14:30:00Z"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                success: false
                message: "Failed to configure notification"
                error: "Database connection error"

    get:
      summary: Get email notification settings for a workflow
      description: Retrieve the current email notification settings for a workflow
      tags:
        - Emails
      parameters:
        - name: workflowId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the workflow to get notification settings for
          example: "workflow_12345678"
      responses:
        '200':
          description: Notification settings retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                    example: "notif_87654321"
                  workflowId:
                    type: string
                    format: uuid
                    example: "workflow_12345678"
                  recipientEmail:
                    type: string
                    format: email
                    example: "user@example.com"
                  sendOnCompletion:
                    type: boolean
                    example: true
                  sendOnFailure:
                    type: boolean
                    example: true
                  createdAt:
                    type: string
                    format: date-time
                    example: "2023-05-15T14:30:00Z"
                  updatedAt:
                    type: string
                    format: date-time
                    example: "2023-05-15T14:35:00Z"
              example:
                id: "notif_87654321"
                workflowId: "workflow_12345678"
                recipientEmail: "user@example.com"
                sendOnCompletion: true
                sendOnFailure: true
                createdAt: "2023-05-15T14:30:00Z"
                updatedAt: "2023-05-15T14:35:00Z"
        '404':
          description: Notification settings not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                success: false
                message: "Notification settings not found for this workflow"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete email notification settings for a workflow
      description: Remove email notification settings for a specific workflow
      tags:
        - Emails
      parameters:
        - name: workflowId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the workflow to delete notification settings for
          example: "workflow_12345678"
      responses:
        '200':
          description: Notification settings deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Notification settings deleted successfully"
              example:
                success: true
                message: "Notification settings deleted successfully"
        '404':
          description: Notification settings not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                success: false
                message: "Notification settings not found for this workflow"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /emails/logs/{workflowId}:
    get:
      summary: Get email logs for a workflow
      description: Retrieve the email notification logs for a specific workflow
      tags:
        - Emails
      parameters:
        - name: workflowId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the workflow to get email logs for
          example: "workflow_12345678"
      responses:
        '200':
          description: Email logs retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uuid
                      example: "log_12345678"
                    workflowId:
                      type: string
                      format: uuid
                      example: "workflow_12345678"
                    recipientEmail:
                      type: string
                      format: email
                      example: "user@example.com"
                    subject:
                      type: string
                      example: "Workflow workflow_12345678 Update"
                    status:
                      type: string
                      enum: [sent, failed, pending]
                      example: "sent"
                    sentAt:
                      type: string
                      format: date-time
                      example: "2023-05-15T14:35:00Z"
                    error:
                      type: string
                      example: null
              example:
                - id: "log_12345678"
                  workflowId: "workflow_12345678"
                  recipientEmail: "user@example.com"
                  subject: "Workflow workflow_12345678 Update"
                  status: "sent"
                  sentAt: "2023-05-15T14:35:00Z"
                  error: null
                - id: "log_87654321"
                  workflowId: "workflow_12345678"
                  recipientEmail: "user@example.com"
                  subject: "Workflow workflow_12345678 Update"
                  status: "failed"
                  sentAt: "2023-05-15T14:30:00Z"
                  error: "SMTP connection error"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /emails/retry/{emailLogId}:
    post:
      summary: Retry sending a failed email
      description: Attempt to resend a previously failed email notification
      tags:
        - Emails
      parameters:
        - name: emailLogId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the email log entry to retry
          example: "log_87654321"
      responses:
        '200':
          description: Email retry initiated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Email retry initiated successfully"
                  logId:
                    type: string
                    format: uuid
                    example: "log_98765432"
              example:
                success: true
                message: "Email retry initiated successfully"
                logId: "log_98765432"
        '404':
          description: Email log not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                success: false
                message: "Email log not found"
        '400':
          description: Email cannot be retried
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                success: false
                message: "Cannot retry email that was already sent successfully"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'