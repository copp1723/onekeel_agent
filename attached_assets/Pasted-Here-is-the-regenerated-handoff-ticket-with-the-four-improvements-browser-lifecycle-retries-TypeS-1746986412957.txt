Here is the regenerated handoff ticket with the four improvements (browser lifecycle, retries, TypeScript signatures, and env var validation) cleanly integrated:

⸻

Title: Implement Config-Driven Playwright Agent Runner for CRM Report Extraction

⸻

Overview:

We are replacing hardcoded Playwright flows with a generic, config-driven runner that can execute multi-step login → optional OTP → navigation → report download tasks, using platform-specific JSON configs. This enables support for multiple systems (e.g. VinSolutions, VAUTO) with no code changes—just config updates.

⸻

✅ Tasks to Complete

1. Create runFlow.ts Execution Engine

Path: src/agents/runFlow.ts

Implement a generic function:

interface FlowStep {
  action: string;
  selector?: string;
  value?: string;
  args?: string[];
  rowSelector?: string;
  buttonSelector?: string;
  saveAs?: string;
  clickAfter?: string;
}

async function runFlow(platform: string, envVars: Record<string, string>): Promise<string> {
  // Loads platform-specific flow from configs/platforms.json
  // Runs loginSteps, otpStep (if present), navigationSteps, downloadSteps
  // Returns path to downloaded file
}

Required behavior:
	•	Use import config from '../../configs/platforms.json'.
	•	Validate all required envVars are defined before continuing. If any are missing, throw a clear error.
	•	Interpolate {{ENV_VAR_NAME}} placeholders inside step values using the passed-in envVars object.
	•	Implement browser lifecycle inside runFlow:

const browser = await chromium.launch({ headless: true });
const page = await browser.newPage();
// ...run steps...
await browser.close();


	•	Wrap the entire flow in try/catch. On failure, retry once. After a second failure, throw.
	•	Special handling:
	•	If action === 'otpEmail', call your existing getEmailOTP() helper, fill the code, then optionally click clickAfter.
	•	If action === 'download', run:

const row = await page.waitForSelector(rowSelector);
const [download] = await Promise.all([
  page.waitForEvent('download'),
  row.locator(buttonSelector).click()
]);
await download.saveAs(saveAs || 'report.csv');



⸻

2. Update fetchCRMReport.ts

Replace existing VinSolutions-specific code with a runFlow call:

import { runFlow } from './runFlow';

const filePath = await runFlow("VinSolutions", {
  VIN_SOLUTIONS_USERNAME: process.env.VIN_SOLUTIONS_USERNAME!,
  VIN_SOLUTIONS_PASSWORD: process.env.VIN_SOLUTIONS_PASSWORD!,
  OTP_EMAIL_USER: process.env.OTP_EMAIL_USER!,
  OTP_EMAIL_PASS: process.env.OTP_EMAIL_PASS!
});

Ensure the result (filePath) is returned and/or passed to summarization tools downstream.

⸻

3. Validate with Both Platforms

Test the following flows:

await runFlow("VinSolutions", {
  VIN_SOLUTIONS_USERNAME: "...",
  VIN_SOLUTIONS_PASSWORD: "...",
  OTP_EMAIL_USER: "...",
  OTP_EMAIL_PASS: "..."
});

await runFlow("VAUTO", {
  VAUTO_USERNAME: "...",
  VAUTO_PASSWORD: "..."
});

Confirm that both succeed from login → (optional OTP) → navigation → download.

⸻

📁 File Structure

src/
├── agents/
│   └── runFlow.ts          ✅ generic multi-step runner
│   └── fetchCRMReport.ts   ✅ updated to use runFlow
configs/
└── platforms.json          ✅ defines all flows for VinSolutions and VAUTO


⸻

📎 Supporting Info

Example Config (from configs/platforms.json)

"VinSolutions": {
  "loginSteps": [
    { "action": "goto", "args": ["https://crm.vinsolutions.com/login"] },
    { "action": "fill", "selector": "#username", "value": "{{VIN_SOLUTIONS_USERNAME}}" },
    { "action": "fill", "selector": "#password", "value": "{{VIN_SOLUTIONS_PASSWORD}}" },
    { "action": "click", "selector": "button[type='submit']" }
  ],
  "otpStep": {
    "action": "otpEmail",
    "selector": "input[name='otp']",
    "clickAfter": "button:has-text('Verify')"
  },
  "navigationSteps": [
    { "action": "click", "selector": "nav >> text=Insights" },
    { "action": "click", "selector": "label:has-text('Most Popular')" }
  ],
  "downloadSteps": [
    {
      "action": "download",
      "rowSelector": "tr:has-text('Dealership Performance Dashboard')",
      "buttonSelector": "button[aria-label='Download']",
      "saveAs": "report.csv"
    }
  ]
}


⸻

✅ Acceptance Criteria
	•	runFlow("VinSolutions", ...) and runFlow("VAUTO", ...) execute from config with no hardcoded selectors.
	•	OTP handling works seamlessly with getEmailOTP().
	•	Browser lifecycle is correctly managed (launch → close).
	•	Full flow is retryable on error and throws only after second failure.
	•	Output file path is returned and usable.
	•	Env var validation fails fast and logs missing vars clearly.

⸻

Let me know once complete so we can wire this into the task executor pipeline.